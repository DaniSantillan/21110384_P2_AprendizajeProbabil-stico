import numpy as np
from sklearn.datasets import make_blobs
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
import matplotlib.pyplot as plt

# Crear un conjunto de datos sintético
X, y = make_blobs(n_samples=300, centers=3, random_state=42)

# Dividir los datos en conjunto de entrenamiento y conjunto de prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Implementar k-NN
knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train, y_train)

# Evaluar el modelo k-NN
accuracy_knn = knn.score(X_test, y_test)
print(f'Precisión del modelo k-NN: {accuracy_knn:.2f}')

# Implementar k-Medias
kmeans = KMeans(n_clusters=3, random_state=42)
kmeans.fit(X)

# Obtener etiquetas de los clusters
labels_kmeans = kmeans.labels_

# Visualizar los resultados de k-Medias
plt.scatter(X[:, 0], X[:, 1], c=labels_kmeans, cmap='viridis')
plt.title('Resultados de k-Medias')
plt.show()

# Implementar Clustering con Modelo de Mezcla Gaussiana (GMM)
gmm = GaussianMixture(n_components=3, random_state=42)
gmm.fit(X)

# Obtener etiquetas de los clusters según GMM
labels_gmm = gmm.predict(X)

# Visualizar los resultados de GMM
plt.scatter(X[:, 0], X[:, 1], c=labels_gmm, cmap='viridis')
plt.title('Resultados de GMM')
plt.show()
